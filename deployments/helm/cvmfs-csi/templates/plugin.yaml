# All of the individual sidecar RBAC roles get bound
# to this account.
kind: ServiceAccount
apiVersion: v1
metadata:
  name: cvmfs-serviceaccount
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
    app.kubernetes.io/part-of: csi-driver-cvmfs
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: serviceaccount
    app.kubernetes.io/managed-by: {{ .Release.Service }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
    app.kubernetes.io/part-of: csi-driver-cvmfs
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: attacher-cluster-role
  name: csi-cvmfsplugin-attacher-cluster-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-attacher-runner
subjects:
- kind: ServiceAccount
  name: cvmfs-serviceaccount
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
    app.kubernetes.io/part-of: csi-driver-cvmfs
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: health-monitor-controller-cluster-role
  name: csi-cvmfsplugin-health-monitor-controller-cluster-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-health-monitor-controller-runner
subjects:
- kind: ServiceAccount
  name: cvmfs-serviceaccount
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
    app.kubernetes.io/part-of: csi-driver-cvmfs
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: provisioner-cluster-role
  name: csi-cvmfsplugin-provisioner-cluster-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-provisioner-runner
subjects:
- kind: ServiceAccount
  name: cvmfs-serviceaccount
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
    app.kubernetes.io/part-of: csi-driver-cvmfs
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: attacher-role
  name: csi-cvmfsplugin-attacher-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: external-attacher-cfg
subjects:
- kind: ServiceAccount
  name: cvmfs-serviceaccount
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
    app.kubernetes.io/part-of: csi-driver-cvmfs
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: health-monitor-controller-role
  name: csi-cvmfsplugin-health-monitor-controller-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: external-health-monitor-controller-cfg
subjects:
- kind: ServiceAccount
  name: cvmfs-serviceaccount
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
    app.kubernetes.io/part-of: csi-driver-cvmfs
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: provisioner-role
  name: csi-cvmfsplugin-provisioner-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: external-provisioner-cfg
subjects:
- kind: ServiceAccount
  name: cvmfs-serviceaccount
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
    app.kubernetes.io/part-of: csi-driver-cvmfs
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: resizer-role
  name: csi-cvmfsplugin-resizer-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: external-resizer-cfg
subjects:
- kind: ServiceAccount
  name: cvmfs-serviceaccount
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
    app.kubernetes.io/part-of: csi-driver-cvmfs
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: snapshotter-role
  name: csi-cvmfsplugin-snapshotter-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: external-snapshotter-leaderelection
subjects:
- kind: ServiceAccount
  name: cvmfs-serviceaccount
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-cvmfsplugin
  labels:
    app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
    app.kubernetes.io/part-of: csi-driver-cvmfs
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: plugin
  namespace: {{ .Release.Namespace }}
spec:
  serviceName: "csi-cvmfsplugin"
  # One replica only:
  # Host path driver only works when everything runs
  # on a single node.
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
      app.kubernetes.io/part-of: csi-driver-cvmfs
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/component: plugin
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Values.csiPlugin.driverName }}
        app.kubernetes.io/part-of: csi-driver-cvmfs
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/component: plugin
    spec:
      serviceAccountName: cvmfs-serviceaccount
      containers:
        - name: cvmfsplugin
          image: {{ .Values.csiPlugin.image }}
          args:
            {{- range $arg := .Values.csiPlugin.args }}
            - {{ $arg | quote -}}
            {{- end }}
          env:
            - name: CSI_ADDRESS
              value: unix://{{ .Values.csiPlugin.pluginDirectory }}/csi.sock
            - name: DRIVER_NAME
              value: {{ .Values.csiPlugin.driverName }}
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          securityContext:
            privileged: true
            # capabilities:
            #   add: ["SYS_ADMIN"]
            # allowPrivilegeEscalation: true
          ports:
          - containerPort: 9898
            name: healthz
            protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: healthz
            initialDelaySeconds: 10
            timeoutSeconds: 3
            periodSeconds: 2
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
            - mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
              name: mountpoint-dir
            - mountPath: /var/lib/kubelet/plugins
              mountPropagation: Bidirectional
              name: plugins-dir
            - mountPath: /csi-data-dir
              name: csi-data-dir
            - mountPath: /dev
              name: dev-dir
            - mountPath: /sys
              name: host-sys

        # The node-driver-registrar is a sidecar container that registers the CSI driver 
        # with Kubelet using the kubelet plugin registration mechanism.
        # This is necessary because Kubelet is responsible for issuing CSI NodeGetInfo, 
        # NodeStageVolume, NodePublishVolume calls.
        # The node-driver-registrar registers your CSI driver with Kubelet so that it 
        # knows which Unix domain socket to issue the CSI calls on.
        - name: node-driver-registrar
          image: {{ .Values.csiPlugin.nodeDriverImage }}
          args:
            - --v=5
            - --csi-address=/csi/csi.sock
            - --kubelet-registration-path={{ .Values.csiPlugin.pluginDirectory }}/csi.sock
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          - mountPath: /registration
            name: registration-dir
          - mountPath: /csi-data-dir
            name: csi-data-dir

        # The CSI livenessprobe is a sidecar container that monitors the health of 
        # the CSI driver and reports it to Kubernetes via the Liveness Probe mechanism.
        - name: liveness-probe
          volumeMounts:
          - mountPath: /csi
            name: socket-dir
          image: {{ .Values.csiPlugin.livenessProbeImage }}
          args:
          - --csi-address=/csi/csi.sock
          - --health-port=9898

        # The external-attacher is a sidecar container that attaches volumes to nodes 
        # by calling ControllerPublish and ControllerUnpublish functions of CSI drivers.
        - name: csi-attacher
          image: {{ .Values.csiPlugin.attacherImage }}
          args:
            - --v=5
            - --csi-address=/csi/csi.sock
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          volumeMounts:
          - mountPath: /csi
            name: socket-dir

        # The external-provisioner is a sidecar container that dynamically provisions 
        # volumes by calling CreateVolume and DeleteVolume functions of CSI drivers.
        - name: csi-provisioner
          image: {{ .Values.csiPlugin.provisionerImage }}
          args:
            - -v=5
            - --csi-address=/csi/csi.sock
            # - --feature-gates=Topology=true
          securityContext:
            # This is necessary only for systems with SELinux, where
            # non-privileged sidecar containers cannot access unix domain socket
            # created by privileged CSI driver container.
            privileged: true
          volumeMounts:
            - mountPath: /csi
              name: socket-dir

      volumes:
        - hostPath:
            path: {{ .Values.csiPlugin.pluginDirectory }}
            type: DirectoryOrCreate
          name: socket-dir
        - hostPath:
            path: /var/lib/kubelet/pods
            type: DirectoryOrCreate
          name: mountpoint-dir
        - hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
          name: registration-dir
        - hostPath:
            path: /var/lib/kubelet/plugins
            type: Directory
          name: plugins-dir
        - hostPath:
            # 'path' is where PV data is persisted on host.
            # using /tmp is also possible while the PVs will not available after plugin container recreation or host reboot
            path: /var/lib/csi-cvmfs-data/
            type: DirectoryOrCreate
          name: csi-data-dir
        - hostPath:
            path: /dev
            type: Directory
          name: dev-dir
        - name: host-sys
          hostPath:
            path: /sys
